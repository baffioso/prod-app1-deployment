{"version":3,"sources":["components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","appBar","backgroundColor","title","fontFamily","search","position","borderRadius","shape","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","Navbar","props","classes","className","AppBar","Toolbar","Typography","variant","InputBase","placeholder","input","inputProps","onChange","changed","card","minWidth","media","paddingTop","button","SimpleCard","useState","setTile","Card","square","elevation","CardHeader","subheader","href","map","target","rel","CardMedia","image","onMouseEnter","console","log","onMouseLeave","CardActions","Tooltip","placement","meta","Button","size","Code","container","progress","top","zIndex","App","state","setState","setSearch","loading","setLoading","useEffect","Axios","get","then","res","sorted","Object","keys","data","x","sort","a","b","toLowerCase","LinearProgress","e","value","str","setTimeout","Container","maxWidth","Grid","filter","includes","item","lg","md","sm","xs","key","interactive","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d87a4ee8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, InputBase, Typography} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        backgroundColor: '#192939d9'\r\n    },\r\n    title: {        \r\n        flexGrow: 1,\r\n        fontFamily: \"'Orbitron', sans-serif\"\r\n    }, search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginRight: theme.spacing(2),\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        width: theme.spacing(7),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 7),\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 200,\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function Navbar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar className={classes.appBar} >\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        TYLER\r\n                    </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon />\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Søg…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{ 'aria-label': 'search' }}\r\n                            onChange={props.changed}\r\n                        />\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Card, CardHeader, CardMedia, CardActions, Button, Tooltip } from '@material-ui/core';\r\nimport { Map as MapIcon, Code as CodeIcon } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        minWidth: 200,\r\n    },\r\n    media: {\r\n        height: 0,\r\n        //verticalAlign: 'middle',\r\n        paddingTop: '60%', // 16:9\r\n    },\r\n    button: {\r\n        minWidth: 30\r\n    }\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n    const classes = useStyles();\r\n\r\n    const [tile, setTile] = useState(true)\r\n\r\n    const onMouseEnterHandler = () => {\r\n        console.log('enter')\r\n        setTile(false)\r\n    }\r\n\r\n    const onMouseLeaveHandler = () => {\r\n        console.log('leave')\r\n        setTile(true)\r\n    }\r\n\r\n    return (\r\n        <Card square elevation={1} className={classes.card}>\r\n            <CardHeader\r\n                subheader={props.title}\r\n            />\r\n            <a href={props.map} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://th.frb-data.dk/${props.title}/12/2190/1281.png`}\r\n                    title={props.title}\r\n                    onMouseEnter={onMouseEnterHandler}\r\n                    onMouseLeave={onMouseLeaveHandler}\r\n                />\r\n            </a>\r\n            <CardActions>\r\n                <Tooltip title='Se meta.json' placement='top'>\r\n                    <a href={props.meta} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <Button size=\"small\" className={classes.button} ><CodeIcon /></Button>\r\n                    </a>\r\n                </Tooltip>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar'\r\nimport Card from './components/Card'\r\n\r\nimport './App.css';\r\nimport Axios from 'axios';\r\nimport { Grid, Container, LinearProgress } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    container: {\r\n        paddingTop: 80,\r\n    },\r\n    progress: {\r\n        top: 65,\r\n        zIndex: 100\r\n    }\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = useState([])\r\n    const [search, setSearch] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        Axios.get('https://th.frb-data.dk/').then((res) => {\r\n            setLoading(false)\r\n            let keys = Object.keys(res.data);\r\n            let formated = keys.map(x => { return { title: x, ...res.data[x] } })\r\n            let sorted = formated.sort((a,b) => a.title.toLowerCase() > b.title.toLowerCase() ? 1 : -1)\r\n            setState(sorted)\r\n        })\r\n    }, [])\r\n\r\n    const searchHandler = (e) => {\r\n        console.log(e.target.value)\r\n        let str = e.target.value\r\n        setTimeout(() => {\r\n            setSearch(str)  \r\n        }, 50);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {loading ? <LinearProgress className={classes.progress} /> : null}\r\n            <Navbar changed={searchHandler}/>\r\n            <Container maxWidth=\"xl\">\r\n                <Grid \r\n                    container\r\n                    spacing={2}\r\n                    className={classes.container}\r\n                >\r\n                    {state.filter(x => x.title.toLowerCase().includes(search.toLowerCase())).map(item => (\r\n                        <Grid item lg={2} md={3} sm={4} xs={12} key={item.title}>\r\n                            <Card\r\n                                title={item.title}\r\n                                meta={item.meta}\r\n                                map={item.interactive}\r\n                            >\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}